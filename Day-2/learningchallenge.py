# -*- coding: utf-8 -*-
"""learningchallenge.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hkpMrFbWQ9RrfQH7pFrnq_7_83FRmKXZ
"""

#importing the pandas library
import pandas as pd

#reading the csv file
df=pd.read_csv('aug_train.csv')

df

##how to open csv file from url

                   #method-1
import pandas as pd
# assigning url to a variable
url="https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv"

# passing parameter to the function
x =pd.read_csv(url)
print(x)

#method-2
 import requests
from io import StringIO

url = "https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv"
headers = {"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko/20100101 Firefox/66.0"}
req = requests.get(url, headers=headers)
data = StringIO(req.text)

pd.read_csv(data)

#how to read tsv file
dataset=pd.read_csv('movie_titles_metadata.tsv')
dataset

#howover on reading the tsv file it shows this kind of result  above



#When reading a .tsv file (Tab-Separated Values),
#the data uses tabs (\t) to separate values instead of commas (like in .csv files).
# To handle this properly, we need to specify the separator as \t (tab)
#while reading the file using pandas.
#so here is how we do it
dataset=pd.read_csv('movie_titles_metadata.tsv',sep='\t')
dataset


#however on observing on the result we can see the the names of column are missing so we can manually
#add the column names simply by looking at the data set
#the 1st column looks like serial no
#2nd column seems to be name of the movie
#3rd column seemes to be year of release
#similary other columns is likely to be imdb rating,votes,genres

#so we will rewrite column as
dataset=pd.read_csv('movie_titles_metadata.tsv',sep='\t',names=['sn','name','yearofrelease','imdbrating','noofvotes','genre'])
dataset

df=pd.read_csv('aug_train.csv')

df
#enrollee_id and index no both kind of does same thing of being unqiue so we can use only one column if we want
#thus for easyness we will be using emrolle_id only

df=pd.read_csv('aug_train.csv',index_col='enrollee_id')
df
#here the column to be taken is written while reading the csv file
#and the new result is as follows:

#if we know which columns to use only
#then we can do as
pd.read_csv('aug_train.csv',usecols=['enrollee_id','gender','education_level'])

#how to skip some rows values
pd.read_csv('aug_train.csv',skiprows=[0,1])

pd.read_csv('zomato.csv')

#syntax to skip bad lines


#pd.read_csv('example.csv',error_bad_lines=false)

#how to convert data types of any column
pd.read_csv('aug_train.csv', dtype={'target': 'int64'})

#syntax to handle dates
#pd.read_csv('exmaple.csv',parse_dates=['date'])

#how to handle large data set
dfs = pd.read_csv('aug_train.csv', chunksize=5000)
for chunk in dfs:
    print(chunk.shape)  # Changed 'chunks' to 'chunk'